// <auto-generated />
using System;
using System.Collections.Generic;
using GameGather.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameGather.Infrastructure.Migrations
{
    [DbContext(typeof(GameGatherDbContext))]
    [Migration("20250325185248_CreateUsersTable")]
    partial class CreateUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameGather.Domain.Aggregates.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("VerifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Password", "GameGather.Domain.Aggregates.Users.User.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime?>("ExpiresOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("LastModifiedOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("VerificationToken", "GameGather.Domain.Aggregates.Users.User.VerificationToken#VerificationToken", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreatedOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("ExpiresOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameGather.Domain.Aggregates.Users.User", b =>
                {
                    b.OwnsOne("GameGather.Domain.Aggregates.Users.ValueObjects.Ban", "Ban", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("ExpiresOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("GameGather.Domain.Aggregates.Users.ValueObjects.ResetPasswordToken", "ResetPasswordToken", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("ExpiresOnUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Ban");

                    b.Navigation("ResetPasswordToken");
                });
#pragma warning restore 612, 618
        }
    }
}
